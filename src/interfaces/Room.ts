import { RoomType } from '@/enums/RoomType';
import { RoomStatus } from '@/enums/RoomStatus';
import { PlayerPresence } from '@/interfaces/PlayerPresence';
import { Categories } from '@/interfaces/Categories';

// New types for round-based recording
export type Penalty = null | '+2' | 'DNF';
export type RoundStatus = 'open' | 'closing' | 'closed';

export interface RoundEntry {
  rawMs?: number;
  finalMs?: number;
  penalty: Penalty;
  participated: boolean;
  dns: boolean;
  submittedAt?: number;
  submittedBy?: string;
  source?: 'auto' | 'manual';
}

export interface RoundRecord {
  index: number; // 0-based
  status: RoundStatus;
  plannedEndTime?: number; // when the round is scheduled to end (ms since epoch)
  startedAt?: number;
  closedAt?: number;
  closedBy?: string;
  entries: { [userId: string]: RoundEntry };
  scramble: Categories;
}

export interface Room {
  // generated by form
  id: string;
  path: string;
  name: string;
  event: Categories;
  type: RoomType;
  password?: string;
  maxRoundTime: number;
  totalRounds: number;
  createdAt: number;
  status: RoomStatus;
  createdBy: string;
  authority: {
    leaderId: string | null
    term: number
  }

  // generated by the system
  matchFinalizationTime?: number;
  preparationFinalizationTime?: number;

  // New: per-round records and optional standings
  rounds?: RoundRecord[]; // length = totalRounds
  // game state
  presence: {
    [userId: string]: PlayerPresence
  }
}


